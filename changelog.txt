2020-11-12:
	- added: TagFilter to AbstractAggregationMutator and derived classes: MemoryAggregationMutator, SortedMemoryAggregationMutator, ContinuousAggregationMutator
	- fixed: MemoryAggregationMutator, SortedMemoryAggregationMutator, ContinuousAggregationMutator properly copy the source Tag to the aggregates from now

2020-11-10:
	- changed: major version 3 is FINAL now
	- changed: targeting .NET 6

2020-11-05:
	- changed: removed IRow.SetStagedValue, ApplyStaging, HasStaging - custom code can simply call "row[x] = y;" instead
	- added: IRow.MergeWidth to apply multiple changes at once
	- added: TrackedRow
		NOTE: NO MORE STAGING, FINALLY!
		TrackedRow is a wrapper of IRow, helping to merge the changes happening in custom code AT ONCE to the original row (huge improvement to diagnostics)
	- added: CustomMutator.Then, MatchAction.CustomAction, NoMatchAction.CustomAction, TooManyMatchAction.CustomAction methods are no longer called with the original row, but with TrackedRow wrapper.
		NOTE: this means the user code doesn't have to deal with MergeWidth or any tricks, and after the delegate is completed, all changes will be applied at once to the original row, transparently
	- added: a few more unit tests

2021-10-05:
	- changed: major version 3 is stable now
	- changed: using LightWeight DB connections
	- changed: fluent API
	- added: MsSqlResetSingleIdentityCounter
	- added: ReplaceStringMutator

2020-09-21:
	- added: targetColumn can be specified in MemoryGroupByOperationExtensions and ContinuousGroupByOperationExtensions methods
	- added: ContinuousGroupByOperationExtensions.AddDoubleAverageIgnoreNull
	- added: ContinuousGroupByOperationExtensions.AddDoubleStandardDeviation
	
2020-09-17:
	- changed: the "EtlContextListeners" section in host-configuration.json is renamed to "ExecutionContextListeners" section

2020-09-15:
	- fixed: now EpPlusExcelReader uses AutomaticallyTrimAllStringValues property for column name trim

2020-09-03:
	- added: CommandLineHandler.Run returns the result of the execution (in case command line arguments are supplied)

2020-08-26:
	- added: ResilientSqlScope.SimpleMergeUpdateOnlyFinalizer and SimpleMergeInsertOnlyFinalizer
	- added: "If" parameter to MemoryAggregationMutator and ContinuousAggregationMutator

2020-08-14:
	- added: IEtlContextListener
	- removed: DIRECT Diagnostics client and support is removed from EtlHost
	- added: EtLast.Diagnostics.HttpSender assembly and HttpSender class (implements IEtlContextListener)
		NOTE: can be wired in through host-configuration.json "EtlContextListeners" section

2020-07-24:
	- added: support for IConfigurationSecretProtector
	- added: "protect" command to EtLast.PluginHost

2020-07-20:
	- fixed: IndexOutOfRangeException in DelimitedFileReader if there are more values in a line than columns

2020-07-09:
	- fixed: rounding issues in average calculators in ContinuousGroupByOperation

2020-07-08:
	- added: ContinuousGroupByOperation.AddIntNumberOfDistinctKeys, AddIntCount, AddIntCountWhenNotNull

2020-07-07:
	- fixed: concurrency issue in DefaultRowQueue
	- fixed: concurrency issue is all Evaluables. Only Splitter<TRowQueue> was affected.
	- added: FluentProcessBuilder BETA (it will be final in the next minor version)

2020-07-03:
	- added: SortedReduceGroupToSingleRowMutator
	- added: ContinuousGroupByOperation supports aggregators with states (per-aggregate) and multicolumn behavior
	- breaking change: KeyColumns changed to KeyGenerator in RemoveDuplicateRowsMutator and ReduceGroupToSingleRowMutator
	- breaking change: GroupingColumns split to KeyGenerator and FixColumns in MemoryAggregationMutator, SortedMemoryAggregationMutator and ContinuousAggregationMutator
		Without these changes it was impossible to handle key casing issues, trimming and other key cleanup functions. It was a design problem and must be fixed before widespread usage.

2020-07-01:
	- added: CustomMemoryAggregationOperation can create any number of aggregates
	- added: SortedMemoryAggregationMutator for pre-grouped aggregations optimized for low RAM usage (streaming), but the input rows must be pre-grouped
	- added: ThrowExceptionOnDuplicateKeyMutator

2020-06-30:
	- added: MsSqlDropStoredProcedures

2020-06-23:
	- added: ReduceGroupToSingleRowMutator

2020-06-22:
	- added: more diag fields to EtlException
	- added: call chain to FormatExceptionWithDetails
	- added: milliseconds part to EtlRunId (10-millisecond precision)

2020-06-18:
	- breaking change: RemoveDuplicateRowsMutator destroyed and re-created all input rows due to a design flaw.
		Now it is no longer an aggregation-type mutator, which means the column list parameters are plain string arrays instead of List<ColumnCopyConfigration>.
		The performance cost was way too high to ignore this design problem, so the fix was inevitable.
	- added: close button for Diagnostics.Windows session tabs
	- added: new filters, better performance and readability on process row list form in Diagnostics.Windows

2020-06-17:
	- added: support incremental load in DwhBuilder InputIsCustomProcess
	- added: OrderDuringFinalization to ResilientTable
	- changed: restore original MsSqlEnableConstraintCheck and use MsSqlEnableConstraintCheckFiltered in MsSqlDwhBuilder internally
	- added: DbColumnDefinition.StraightCopyAndEscape

2020-06-16:
	- fixed: Diagnostics.Windows supports different casing in column names now
	- optimized: RemoveExistingRows extension in DwhBuilder.MsSql

2020-06-15
	- fixed: validate InputProcess in ProcessBuilder

2020-06-12
	- added: InMemoryProcessor
	- fixed: RemoveExistingRows extension in DwhBuilder.MsSql generated wrong query for tables with only key columns

2020-06-11
	- removed: legacy internal counters
	- added: session and plugin summary to EtlHost (with I/O statistics)

2020-06-10
	- changed: "test modules" command in EtlHost forces dynamic compilation of the specified module(s)

2020-06-09
	- added: DwhColumnFlagProperty and DwhTableFlagProperty
	- added: MsSqlDwhBuilder.AddPreFinalizer

2020-06-02
	- added: DelimitedFileReader.RemoveSurroundingDoubleQuotes (default true for backward compatibility)
	- fixed: DelimitedFileReader no longer throws exception if a value is a single " character (and RemoveSurroundingDoubleQuotes is true)

2020-05-28
	- fixed: the host-configuration.json was not found inside the current directory

2020-05-26
	- fixed: AbstractAdoNetDbReader no longer crash when query return same column multiple times
	- fixed: ExceptionHelpers.FormatExceptionWithDetails when source exception has no stack trace

2020-05-25
	- added: MatchMode.CustomThenRemove
	- added: support of MatchMode.CustomThenRemove to all existing cross operations
